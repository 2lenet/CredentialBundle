{% extends  "base.html.twig" %}

{% block page_title %}{{ 'title.admin_rights' | trans({}, 'CredentialBundle') }}{% endblock %}

{% block main %}
    {{ parent() }}

    <div class="page-header">
        <h2 class="title">{{ 'title.rights' | trans({}, 'CredentialBundle') }}</h2>
    </div>
    <style>
        .bundle-credential .table-striped > tbody > tr:nth-of-type(odd) {
            background-color: #DDD;
        }

        .bundle-credential .table {
            margin-bottom: 0px;
        }

        .bundle-credential .all-roles {
            width: 450px;
        }
    </style>

    <div class="bundle-credential box box-primary" style="border:1px solid #ccc; padding:5px; border-top:2px solid #3299DC;">

        <table class="table table-responsive table-bordered table-striped">
            <tr>
                <th class="all-roles">{{ 'title.all_roles'|trans({}, 'CredentialBundle') }}</th>
                {% for group in groupes %}
                    <th style="background-color: #e2dfdf; vertical-align: bottom">
                        <div style="writing-mode: vertical-lr;">{{ group.libelle ?? group.name|lower|humanize }}&nbsp;</div>
                        &nbsp;<input autocomplete="off" class="lle-credential-cb-check-group" type="checkbox" data-group="{{ group.id }}">
                    </th>
                {% endfor %}
            </tr>
        </table>

        {% set rubrique = '###' %}
        {% set rubriqueId = 0 %}
        {% for cred in credentials %}
            {% if rubrique != cred.rubrique %}
                {% set rubrique = cred.rubrique %}
                {% set rubriqueId = rubriqueId + 1 %}

                {% if not loop.first %}</table>{% endif %}

                <div style="background-color: #CECECE; text-align: center; padding:3px;">
                    <strong>
                        {% if rubrique == '' %}{{ 'title.unknown_heading' | trans({}, 'CredentialBundle') }}{% else %}{{ rubrique  ?? ('title.unknown_heading' | trans({}, 'CredentialBundle')) }}{% endif %}
                        <span data-toggle-rubrique="{{ rubriqueId }}" data-rubrique-visible="true" class="fa fa-minus-square pull-right"></span>
                    </strong>
                </div>

                <table class="table table-responsive table-bordered table-striped">
                    <tr class="rubrique-groupe-data-{{ rubriqueId }}">
                        <th class="all-roles">{{ 'title.all_roles' | trans({}, 'CredentialBundle') }}</th>
                        {% for group in groupes %}
                            <th style="background-color: #e2dfdf; vertical-align: bottom">
                                <div style="writing-mode: vertical-lr;">{{ group.libelle ?? group.name|lower|humanize }}&nbsp;</div>
                                &nbsp;<input autocomplete="off" data-rubrique-id="{{ rubriqueId }}" data-rubrique-name="{{ rubrique }}" data-group="{{ group.id }}" id="lle-credential-cb-{{ rubriqueId }}-{{ group.id }}" class="lle-credential-cb-check-rubrique" type="checkbox">
                            </th>
                        {% endfor %}
                    </tr>
            {% endif %}
                    <tr class="rubrique-groupe-data-{{ rubriqueId }}">
                        <th>
                            {{ cred.libelle ?? cred|lower|humanize }}
                            {% if cred.listeStatus %}
                                <hr class="m-1">
                                {{ 'title.status_allowed' | trans({}, 'CredentialBundle') }}
                                <button class="p-0 float-end btn btn-sm btn-tranparent" type="button" data-bs-toggle="collapse" data-bs-target=".multi-collapse-{{ cred.role }}" aria-expanded="false" aria-controls="status-list-{{ cred.role }} checkboxes-status-list-{{ cred.role }}">
                                    <i class="fas fa-angle-down"></i>
                                </button>
                                <div class="collapse multi-collapse multi-collapse-{{ cred.role }}" id="status-list-{{ cred.role }}">
                                    {% for status in cred.listeStatus %}
                                        <div>
                                            {{ status|capitalize }}
                                        </div>
                                    {% endfor %}
                                </div>
                            {% endif %}
                        </th>
                        {% for group in groupes %}
                            <td>
                                <input autocomplete="off" type="checkbox" data-rubrique-id="{{ rubriqueId }}" data-rubrique-name="{{ rubrique }}" data-group="{{ group.id }}" class="lle-credential-cb cb-group-{{ group.id }} cb-rubrique-{{ rubriqueId }}-group-{{ group.id }}" id="{{ group.name }}-{{ cred.role }}"
                                        {% if actives[group.name ~ '-' ~ cred.role] ?? false %} checked="checked" {% endif %}
                                >
                                {% if cred.listeStatus %}
                                    <hr class="m-1">
                                    <input
                                            autocomplete="off"
                                            type="checkbox"
                                            data-group="{{ group.name }}"
                                            data-credential="{{ cred.role }}"
                                            data-status="{{ cred.listeStatus|join(',') }}"
                                            class="cb-group-credential-status-allowed"
                                            id="{{ group.name }}-{{ cred.role }}-status"
                                            name="{{ group.name }}-{{ cred.role }}-status"
                                            {% if statusAllowed[group.name ~ '-' ~ cred.role] ?? false %} checked="checked" {% endif %}
                                    >
                                    <div class="collapse multi-collapse multi-collapse-{{ cred.role }}" id="checkboxes-status-list-{{ cred.role }}">
                                        <div class="{% if not statusAllowed[group.name ~ '-' ~ cred.role] ?? false %} d-none {% endif %}" id="show-all-status-checkboxes-{{ group.name }}-{{ cred.role }}">
                                            {% for status in cred.listeStatus %}
                                                <div>
                                                    <input
                                                            autocomplete="off"
                                                            type="checkbox"
                                                            class="cb-group-credential-allowed-by-status"
                                                            id="{{ group.name }}-{{ cred.role }}-{{ status }}"
                                                            {% if actives[group.name ~ '-' ~ cred.role ~ '_' ~ status|upper] ?? false %} checked="checked" {% endif %}
                                                            data-bs-toogle="tooltip"
                                                            title="{{ status|capitalize }}"
                                                    >
                                                </div>
                                            {% endfor %}
                                        </div>
                                    </div>
                                {% endif %}
                            </td>
                        {% endfor %}
                    </tr>
        {% endfor %}
        </table>
    </div>

    <script>
        let ready = (callback) => {
            if (document.readyState != "loading") callback();
            else document.addEventListener("DOMContentLoaded", callback);
        }

        ready(() => {
            check();

            // All checkoxes of a group
            const checkboxCheckGroup = document.querySelectorAll('.lle-credential-cb-check-group');

            // All checkboxes of a group in a rubrique
            const checkboxCheckRubrique = document.querySelectorAll('.lle-credential-cb-check-rubrique');

            // A checkbox of a group in a rubrique
            const checkboxes = document.querySelectorAll('.lle-credential-cb');

            // A checkbox of a group for a credential to allowed status
            const checkboxesStatusAllowed = document.querySelectorAll('.cb-group-credential-status-allowed');

            // A checkbox of a group for a credential for a status
            const checkboxesAllowCredentialForStatus = document.querySelectorAll('.cb-group-credential-allowed-by-status');

            // Icon + or -
            const toggleCheckboxes = document.querySelectorAll('[data-toggle-rubrique]');

            // Hide/show rubrique
            for (let checkbox of toggleCheckboxes) {
                checkbox.addEventListener('click', function () {
                    let rubriquesGroupe = document.querySelectorAll('.rubrique-groupe-data-' + checkbox.dataset.toggleRubrique);

                    for (let rubriqueGroupe of rubriquesGroupe) {
                        if (checkbox.dataset.rubriqueVisible === 'true') {
                            rubriqueGroupe.style.display = "none";
                        } else {
                            rubriqueGroupe.style.display = "table-row";
                        }
                    }

                    if (checkbox.dataset.rubriqueVisible === 'true') {
                        checkbox.dataset.rubriqueVisible = 'false'
                    } else {
                        checkbox.dataset.rubriqueVisible = 'true';
                    }

                    checkbox.classList.toggle("fa-minus-square");
                    checkbox.classList.toggle("fa-plus-square");
                })
            }

            // Check all checkboxes of a group
            for (let checkbox of checkboxCheckGroup) {
                checkbox.addEventListener('change', function () {
                    let checkboxes = document.querySelectorAll('.cb-group-' + this.dataset.group);
                    let shouldCheck = window.confirm('{{ 'label.enable_or_disable' | trans({}, 'CredentialBundle') }}' + ' ' + checkboxes.length + ' ' + '{{ 'label.roles_question' | trans({}, 'CredentialBundle') }}');

                    if (shouldCheck) {
                        checkboxes.forEach(checkbox => {
                            checkbox.checked = this.checked;
                        });

                        let data = new FormData();
                        data.append('group', this.dataset.group);
                        data.append('checked', this.checked);

                        fetch("/admin/credential/toggle_all", {
                            method: "POST",
                            body: data,
                        });
                    } else {
                        this.checked = !this.checked;
                    }

                    check();
                });
            }

            // Check all checkboxes of a group in a rubrique
            for (let checkbox of checkboxCheckRubrique) {
                checkbox.addEventListener('change', function () {
                    let checkboxes = document.querySelectorAll('.cb-rubrique-' + this.dataset.rubriqueId + '-group-' + this.dataset.group);
                    let shouldCheck = window.confirm('{{ 'label.enable_or_disable' | trans({}, 'CredentialBundle') }}' + ' ' + checkboxes.length + ' ' + '{{ 'label.roles_question' | trans({}, 'CredentialBundle') }}');

                    if (shouldCheck) {
                        checkboxes.forEach(checkbox => {
                            checkbox.checked = this.checked;
                        });

                        let data = new FormData();
                        data.append('group', this.dataset.group);
                        data.append('rubrique', this.dataset.rubriqueName);
                        data.append('checked', this.checked);

                        fetch("/admin/credential/toggle_all", {
                            method: "POST",
                            body: data,
                        });
                    } else {
                        this.checked = !this.checked;
                    }

                    check();
                });
            }

            // Check a checkbox of a group in a rubrique
            for (checkbox of checkboxes) {
                checkbox.addEventListener('change', function () {
                    let data = new FormData();
                    data.append("id", this.id);

                    fetch("/admin/credential/toggle", {
                        method: "POST",
                        body: data,
                    })

                    check();
                });
            }

            // Check a checkbox of a group for a credential to allowed status
            for (checkbox of checkboxesStatusAllowed) {
                checkbox.addEventListener('change', function () {
                    let data = new FormData();
                    let id = this.id;
                    data.append('id', id);

                    let group = id.split('-')[0];
                    let credential = id.split('-')[1];

                    let checkboxToCheck = document.getElementById(group + "-" + credential + "-status");
                    let checkboxesToShow = document.getElementById('show-all-status-checkboxes-' + group + '-' + credential);

                    if (checkboxToCheck.checked) {
                        checkboxesToShow.classList.remove('d-none');
                    } else {
                        checkboxesToShow.classList.add('d-none');
                    }

                    fetch('/admin/credential/allowed_status', {
                        method: 'POST',
                        body: data,
                    });
                });
            }

            // Check a checkbox of a group for a credential for a status
            for (checkbox of checkboxesAllowCredentialForStatus) {
                checkbox.addEventListener('change', function () {
                    let data = new FormData();
                    data.append("id", this.id);

                    fetch("/admin/credential/allowed_for_status", {
                        method: "POST",
                        body: data,
                    });
                });
            }
        });

        function check() {
            // All checkoxes of a group
            const checkboxCheckGroup = document.querySelectorAll('.lle-credential-cb-check-group');

            // All checkboxes of a group in a rubrique
            const checkboxCheckRubrique = document.querySelectorAll('.lle-credential-cb-check-rubrique');

            // Check checkboxRubrique if all checkboxes are checked
            for (let checkboxRubrique of checkboxCheckRubrique) {
                let group = checkboxRubrique.dataset.group;
                let rubrique = checkboxRubrique.dataset.rubriqueId;

                let checkboxes = document.querySelectorAll('.cb-rubrique-' + rubrique + '-group-' + group);
                let allChecked = true;

                for (checkbox of checkboxes) {
                    if (!checkbox.checked) {
                        allChecked = false;
                        break;
                    }
                }

                checkboxRubrique.checked = allChecked;
            }

            // Check checkboxGroup if all checkboxRubrique are checked
            for (let checkboxGroup of checkboxCheckGroup) {
                let group = checkboxGroup.dataset.group;

                let checkboxesRubrique = document.querySelectorAll('.cb-group-' + group);
                let allRubriqueChecked = true;

                for (let checkboxRubrique of checkboxesRubrique) {
                    if (!checkboxRubrique.checked) {
                        allRubriqueChecked = false;
                        break;
                    }
                }

                checkboxGroup.checked = allRubriqueChecked;
            }
        }
    </script>
{% endblock %}
